# -*- coding: utf-8 -*-
"""06_3920_EDA (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vWOZDXanjq-jik4Rodf71JK0ZjrkiDYo

# [3920] Exploratory Data Analysis
Data file:
* Data: ● [diabetes_health_indicators_100K.csv
](https://docs.google.com/spreadsheets/d/13ka35JTeNaOJCzY36WDxNZoEJQ3BSn1_tOJL9aXHnK8/edit?usp=sharing)

### Import libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""### Load data"""

# Read data file (student_lifestyle.csv) into a dataframe
#  Default field separator is ','
df = pd.read_csv('/content/diabetes_health_indicators_100K.csv')

# Display shape of dataframe
df.shape

# Display the first few rows
print("First 5 rows of the dataset:")
print(df.head(), "\n")

# Display DataFrame information
print("DataFrame info:")
df.info()
print("\n")

# Summary statistics for numeric columns (e.g., BMI)
print("Summary statistics for numeric columns:")
print(df.describe())
print("\n")

# Summary for categorical columns (excluding ID columns)
categorical_columns = [col for col in df.columns if df[col].dtype == 'object' and col not in ['Patient ID', 'Hospital ID']]
for col in categorical_columns:
    print(f"Value counts for {col}:")
    print(df[col].value_counts())
    print("\n")

# Check for missing values in the dataset
print("Missing values per column:")
print(df.isnull().sum(), "\n")

"""## **VISUALIZATIONS**"""

# 1. Countplot for the binary variable 'Have_Diabetes'
plt.figure(figsize=(8, 5))
sns.countplot(x="Have_Diabetes", data=df)
plt.title("Countplot: Have_Diabetes")
plt.xlabel("Have_Diabetes")
plt.ylabel("Count")
plt.tight_layout()
plt.show()

# 2. Distribution of BMI
plt.figure(figsize=(8, 5))
sns.histplot(df["BMI"], kde=True, bins=30)
plt.title("Distribution of BMI")
plt.xlabel("BMI")
plt.ylabel("Frequency")
plt.tight_layout()
plt.show()

# 3. Countplots for selected categorical variables
categorical_features = [
    "High_BP", "High_Chol", "Chol_Checked", "Smoker", "Had_Stroke",
    "Have_Heart_Disease", "Physically_Active", "Eat_Fruits", "Eat_Veggies",
    "Heavy_Drinker", "Have_Health_Insurance", "Skipped_Doctor_Due_To_Cost",
    "General_Health_State", "Mental_Health_State", "Physical_Health_State",
    "Difficulty_Walking", "Gender", "Age", "Education_Level", "Income_Range"
]

for col in categorical_features:
    plt.figure(figsize=(10, 5))
    sns.countplot(x=col, data=df)
    plt.title(f"Countplot of {col}")
    plt.xlabel(col)
    plt.ylabel("Count")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# 4. Correlation matrix for numeric columns (e.g., BMI)
numeric_cols = df.select_dtypes(include=[np.number]).columns
if len(numeric_cols) > 0:
    plt.figure(figsize=(10, 8))
    sns.heatmap(df[numeric_cols].corr(), annot=True, cmap='coolwarm', fmt=".2f")
    plt.title("Correlation Matrix (Numeric Features)")
    plt.tight_layout()
    plt.show()
else:
    print("No numeric columns available for correlation matrix analysis.")

# Generate summary statistics for numeric columns
df.describe()

# Generate summary statistics for numeric columns in transposed format
df.describe().T

"""### Visualize data using Pandas"""

# Scatter plot: BMI vs Mental Health State (red points)
df.plot(x='BMI', y='Mental_Health_State', style='r.')
plt.title('BMI vs Mental Health State')
plt.xlabel('BMI')
plt.ylabel('Mental Health State')
plt.show()

# Scatter plot: BMI vs Physical Health State (green circles)
df.plot(x='BMI', y='Physical_Health_State', style='go')
plt.title('BMI vs Physical Health State')
plt.xlabel('BMI')
plt.ylabel('Physical Health State')
plt.show()

# Scatter plot: BMI vs Mental Health State (blue pixels)
df.plot(x='BMI', y='Mental_Health_State', style='b,')
plt.title('BMI vs Mental Health State (blue pixels)')
plt.xlabel('BMI')
plt.ylabel('Mental Health State')
plt.show()

# Bar plot: Average BMI by General Health State
df.groupby('General_Health_State')['BMI'].mean().plot(kind='bar')
plt.title('Average BMI by General Health State')
plt.xlabel('General Health State')
plt.ylabel('Average BMI')
plt.show()

"""### Visualize data using Matplotlib"""

# Plot: BMI vs Mental Health State (green points)
plt.figure(figsize=(10, 4))
plt.plot(df['BMI'], df['Mental_Health_State'], 'g.')
plt.title('BMI vs Mental Health State')
plt.xlabel('BMI')
plt.ylabel('Mental Health State')
plt.show()

# Plot: BMI vs Physical Health State (blue points)
plt.figure(figsize=(12, 6))
plt.plot(df['BMI'], df['Physical_Health_State'], 'b.')
plt.title('BMI vs Physical Health State')
plt.xlabel('BMI')
plt.ylabel('Physical Health State')
plt.show()

# Scatter plot: BMI vs Mental Health State with default colormap
plt.figure(figsize=(12, 6))
plt.scatter(df['BMI'], df['Mental_Health_State'], c=df['Mental_Health_State'])
plt.colorbar(label='Mental Health State')
plt.title('BMI vs Mental Health State (colored by Mental Health State)')
plt.xlabel('BMI')
plt.ylabel('Mental Health State')
plt.show()

# Scatter plot: BMI vs Mental Health State with diverging colormap 'Spectral'
plt.figure(figsize=(12, 6))
plt.scatter(df['BMI'], df['Mental_Health_State'], c=df['Mental_Health_State'], cmap='Spectral')
plt.colorbar(label='Mental Health State')
plt.title('BMI vs Mental Health State (Spectral colormap)')
plt.xlabel('BMI')
plt.ylabel('Mental Health State')
plt.show()

# Scatter plot: BMI vs Mental Health State with sequential colormap 'Blues'
plt.figure(figsize=(16, 8), dpi=80)
plt.scatter(df['BMI'], df['Mental_Health_State'], c=df['Mental_Health_State'], cmap='Blues')
plt.colorbar(label='Mental Health State')
plt.title('BMI vs Mental Health State (Blues colormap)')
plt.xlabel('BMI')
plt.ylabel('Mental Health State')
plt.show()

"""### Visualize data using Seaborn"""

# ----- Correlation Matrix -----
plt.figure(figsize=(6, 4))
# Calculate correlations among numeric columns (e.g., BMI, Mental/Physical Health State)
correlation_matrix = df.corr(numeric_only=True).round(2)
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix (Numeric Features)')
plt.show()

# Display only the bottom half of the correlation matrix
plt.figure(figsize=(6, 4))
mask = np.zeros_like(correlation_matrix, dtype=bool)
mask[np.triu_indices_from(mask)] = True
sns.heatmap(correlation_matrix, annot=True, mask=mask, cmap='coolwarm')
plt.title('Bottom Half Correlation Matrix')
plt.show()

# ----- Count Plot -----
plt.figure(figsize=(4, 4))
# Example: Countplot for binary "Have_Diabetes"
ax = sns.countplot(x='Have_Diabetes', data=df, palette='pastel')
ax.bar_label(ax.containers[0])
plt.title('Count of Diabetes Status')
plt.show()

# ----- Pie Chart -----
# Pie chart for distribution of "Have_Diabetes"
diabetes_counts = df['Have_Diabetes'].value_counts()
HD_counts = list(diabetes_counts.values)
HD_labels = list(diabetes_counts.index)
wedge_setting = 0.1
explode_settings = tuple([wedge_setting for _ in HD_counts])
plt.figure(figsize=(4, 4))
plt.pie(HD_counts, labels=HD_labels, explode=explode_settings, autopct='%0.0f%%',
        colors=sns.color_palette('Set2'), startangle=0, labeldistance=1.1)
plt.title('Diabetes Status Distribution')
plt.show()

# ----- Histograms -----
# Histogram of BMI
plt.figure(figsize=(3, 3))
sns.set(style="darkgrid")
sns.histplot(data=df, x='BMI')
plt.title('BMI Distribution')
plt.show()

# Histogram of Mental Health State
plt.figure(figsize=(3, 3))
sns.set(style="whitegrid")
sns.histplot(data=df, x='Mental_Health_State')
plt.title('Mental Health State Distribution')
plt.show()

# Histogram of Mental Health State with KDE overlay
plt.figure(figsize=(3, 3))
sns.set(style="darkgrid")
sns.histplot(data=df, x='Mental_Health_State', kde=True)
plt.title('Mental Health State Distribution with KDE')
plt.show()

# Histogram of Mental Health State (10 bins)
plt.figure(figsize=(3, 3))
sns.set(style="whitegrid")
sns.histplot(data=df, x='Mental_Health_State', bins=10)
plt.title('Mental Health State (10 bins)')
plt.show()

# Rotated histogram of Mental Health State (5 bins)
plt.figure(figsize=(3, 3))
sns.set(style="whitegrid")
sns.histplot(data=df, y='Mental_Health_State', bins=5)
plt.title('Rotated Histogram of Mental Health State (5 bins)')
plt.show()

# ----- Box Plot -----
# Boxplot: BMI across different Diabetes statuses
plt.figure(figsize=(6, 6))
sns.boxplot(x='Have_Diabetes', y='BMI', data=df, palette='muted', hue='Have_Diabetes')
plt.title('BMI Distribution Across Diabetes Status')
plt.xlabel('Diabetes Status')
plt.ylabel('BMI')
plt.tight_layout()
plt.show()

# Boxplot for selected numeric columns
plt.figure(figsize=(12, 6))
df.boxplot(['BMI', 'Mental_Health_State', 'Physical_Health_State'],
           patch_artist=True,
           boxprops=dict(facecolor='lightblue', color='black'),
           whiskerprops=dict(color='orange', linewidth=1.5),
           capprops=dict(color='green', linewidth=2),
           flierprops=dict(markerfacecolor='red', marker='.', markersize=7),
           medianprops=dict(color='purple', linewidth=2))
plt.xticks(rotation=75)
plt.title('Boxplots for BMI and Health States')
plt.show()

"""#### SIDE BY SIDE PLOTS


"""

plt.figure(figsize=(10, 4))
# Subplot 1: Count plot for Diabetes status (horizontal)
plt.subplot(1, 2, 1)
sns.countplot(y='Have_Diabetes', data=df, hue='Have_Diabetes', palette='muted', dodge=False)
plt.title('Distribution of Diabetes Status')
ax = plt.gca()
for p in ax.patches:
    count = int(p.get_width())
    ax.annotate(f'{count}', (p.get_width(), p.get_y() + p.get_height() / 2),
                ha='left', va='center', xytext=(5, 0), textcoords='offset points')
sns.despine(left=True, bottom=True)
plt.legend([], [], frameon=False)

# Subplot 2: Pie chart for Diabetes distribution
plt.subplot(1, 2, 2)
diabetes_counts.plot.pie(
    autopct='%1.1f%%',
    colors=sns.color_palette('muted'),
    startangle=90,
    explode=[0.05] * len(diabetes_counts),
    wedgeprops={'edgecolor': 'black'},
)
plt.title('Percentage Distribution of Diabetes Status')
plt.ylabel('')
plt.tight_layout()
plt.show()

"""#### UNIVARIATE ANALYSIS FOR NUMERIC COLUMNS"""

def univariate_analysis(data, columns):
    plt.figure(figsize=(8, 6))
    muted_colors = sns.color_palette("muted", len(columns))
    # Arrange subplots in a grid (adjust rows/cols as needed)
    for i, column in enumerate(columns):
        plt.subplot(2, 2, i + 1)
        sns.histplot(data[column], kde=True, bins=10, color=muted_colors[i])
        plt.title(f'{column} Distribution with KDE', fontsize=10)
        plt.xlabel(column, fontsize=9)
        plt.ylabel('Frequency', fontsize=9)
    plt.tight_layout()
    plt.show()

columns_to_analyze = ['BMI', 'Mental_Health_State', 'Physical_Health_State']
univariate_analysis(df, columns_to_analyze)

"""#### Box Plots"""

numerical_features = ['BMI', 'Mental_Health_State', 'Physical_Health_State']
plt.figure(figsize=(10, 10))
for i, feature in enumerate(numerical_features, 1):
    plt.subplot(2, 2, i)
    sns.boxplot(x='Have_Diabetes', y=feature, data=df, palette='muted')
    plt.title(f'{feature} by Diabetes Status')
    plt.xlabel('Diabetes Status', fontsize=10)
    plt.ylabel(feature, fontsize=10)
plt.tight_layout()
plt.show()

"""#### Pie Charts: Compare General Health State Distributions by Diabetes Status"""

# Separate the data by diabetes status
no_diabetes = df[df['Have_Diabetes'] == 'NO']
yes_diabetes = df[df['Have_Diabetes'] == 'YES']

# Count distribution for General Health State in each group
no_diab_health_counts = no_diabetes['General_Health_State'].value_counts()
yes_diab_health_counts = yes_diabetes['General_Health_State'].value_counts()

plt.figure(figsize=(16, 8))

# Pie chart for patients without diabetes
plt.subplot(1, 2, 1)
no_diab_health_counts.plot.pie(
    autopct='%1.1f%%',
    colors=sns.color_palette('pastel'),
    startangle=90,
    explode=[0.05] * len(no_diab_health_counts),
    labels=no_diab_health_counts.index
)
plt.title('General Health State Distribution (No Diabetes)')
plt.ylabel('')

# Pie chart for patients with diabetes
plt.subplot(1, 2, 2)
yes_diab_health_counts.plot.pie(
    autopct='%1.1f%%',
    colors=sns.color_palette('pastel'),
    startangle=90,
    explode=[0.05] * len(yes_diab_health_counts),
    labels=yes_diab_health_counts.index
)
plt.title('General Health State Distribution (Diabetes)')
plt.ylabel('')

plt.tight_layout()
plt.show()
